<?php

declare(strict_types=1);

use Phinx\Migration\AbstractMigration;

/**
 * Migration: InitialSchemaSetup
 *
 * Purpose:      Sets up the initial database schema for the E-commerce Theme Builder.
 *
 * Affected Tables/Entities:
 * - page_type_enum (enum)
 * - users
 * - shops
 * - pages
 * - demo_categories
 * - demo_products
 *
 * Special Considerations:
 * - This migration creates all core tables required for the application to function.
 * - Destructive operations are included in the `down()` method to revert the schema.
 */
final class InitialSchemaSetup extends AbstractMigration
{
    /**
     * Applies the database schema changes.
     */
    public function up(): void
    {
        $this->execute(<<<SQL
            --
            -- Migration Step 1: Create Custom Enum Types
            --
            -- Creates the `page_type_enum` to constrain the `type` column in the `pages` table.
            -- This ensures data integrity for page identification.
            --
            create type page_type_enum as enum ('home', 'catalog', 'product', 'contact');

            --
            -- Migration Step 2: Create `users` Table
            --
            -- Stores user authentication and account information.
            --
            create table users (
                id uuid primary key default gen_random_uuid(),
                email varchar(255) not null,
                password varchar(255) not null,
                created_at timestamptz not null default now(),
                updated_at timestamptz not null default now()
            );

            -- Create a unique index on the email column for fast lookups and to enforce uniqueness.
            create unique index idx_users_email on users(email);

            --
            -- Migration Step 3: Create `shops` Table
            --
            -- Represents a user's shop, the primary organizational entity.
            -- A user can only have one shop (enforced by a unique constraint on user_id).
            --
            create table shops (
                id uuid primary key default gen_random_uuid(),
                user_id uuid not null references users(id) on delete cascade,
                name varchar(60) not null,
                theme_settings jsonb not null default '{}',
                created_at timestamptz not null default now(),
                updated_at timestamptz not null default now()
            );

            -- Create a unique index on user_id to enforce the one-to-one relationship
            -- between users and shops and for fast lookups.
            create unique index idx_shops_user_id on shops(user_id);

            --
            -- Migration Step 4: Create `pages` Table
            --
            -- Stores page layouts for each shop. Each shop can have one of each page type.
            --
            create table pages (
                id uuid primary key default gen_random_uuid(),
                shop_id uuid not null references shops(id) on delete cascade,
                type page_type_enum not null,
                layout jsonb not null default '[]',
                created_at timestamptz not null default now(),
                updated_at timestamptz not null default now()
            );

            -- Create a unique composite index on shop_id and type to enforce the constraint
            -- that a shop can only have one page of each type.
            create unique index idx_pages_shop_type on pages(shop_id, type);

            --
            -- Migration Step 5: Create `demo_categories` Table
            --
            -- Stores static product categories, shared across all shops.
            --
            create table demo_categories (
                id integer primary key generated by default as identity,
                name varchar(255) not null
            );

            --
            -- Migration Step 6: Create `demo_products` Table
            --
            -- Stores a static product catalog, shared across all shops.
            --
            create table demo_products (
                id integer primary key generated by default as identity,
                category_id integer not null references demo_categories(id),
                name varchar(255) not null,
                description text not null,
                price integer not null, -- Stored in cents
                sale_price integer null, -- Stored in cents
                image_thumbnail varchar(255) not null,
                image_medium varchar(255) not null,
                image_large varchar(255) not null
            );

            -- Create an index on category_id for efficient filtering of products by category.
            create index idx_demo_products_category_id on demo_products(category_id);
        SQL);
    }

    /**
     * Reverts the database schema changes.
     */
    public function down(): void
    {
        $this->execute(<<<SQL
            --
            -- Reverting Migration: Dropping all created entities
            --
            -- WARNING: This is a destructive operation that will remove all data
            -- from the tables created in this migration.
            -- The order of operations is important to respect foreign key constraints.
            --

            -- Step 1: Drop tables.
            -- Dropping in reverse order of creation to avoid foreign key violations.
            drop table if exists demo_products;
            drop table if exists demo_categories;
            drop table if exists pages;
            drop table if exists shops;
            drop table if exists users;

            -- Step 2: Drop custom enum type.
            -- This can only be done after all tables using it are dropped.
            drop type if exists page_type_enum;
        SQL);
    }
}